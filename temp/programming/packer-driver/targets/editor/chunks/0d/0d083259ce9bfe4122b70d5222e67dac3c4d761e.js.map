{"version":3,"sources":["file:///Users/abhishekrawat/Desktop/ImageSlicerViewer-sliceAnim/assets/Scripts/GamePlay.ts"],"names":["_decorator","Component","ImageAsset","Prefab","instantiate","CCInteger","UITransform","Vec3","photoSlice2","ccclass","property","GamePlay","type","imgCallback","smallSlice","selectedImage","puzzleResult","imageComplete","result","pos","start","setImageforSlice","imageAsset","inc","callback","a","Array","loopNum","frame","node","getChildByName","frameCh","removeAllChildren","i","spilt","slicePrefab","getComponent","setSlice","setPosition","height","addChild","getPosition","radomH","fgetRandom","setSiblingIndex","undefined","y","min","max","flag","value","Math","floor","random","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ImageAsset, SpriteFrame, Texture2D, math, Sprite, macro, Prefab, instantiate, Label, Enum, CCInteger, UITransform, Vec3 } from 'cc';\n\nimport { photoSlice2 } from './photoSlice2';\nimport { SingletonClass } from './SingleTon';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GamePlay')\nexport class GamePlay extends Component {\n\n    @property({type:ImageAsset})\n    imageAssert:ImageAsset=null;\n    \n    @property({type : Prefab})\n    slicePrefab : Prefab = null;\n    \n    @property({type: Prefab})\n    imageGlow : Prefab = null;\n    \n    @property({type: CCInteger})\n    spilt : any = 0;\n    \n    @property({type: CCInteger})\n    sliceNumber : any = 0;\n\n    imgCallback : any = null;\n\n    smallSlice : Node = null;\n\n    selectedImage  : SpriteFrame = null;\n    \n    puzzleResult : Boolean = false;\n\n    start() {\n      \n    }\n    setImageforSlice(imageAsset: any, inc:number,callback){\n        this.imgCallback = callback\n        var a=new Array();\n        var loopNum=0;\n        let frame = this.node.getChildByName('Frame');\n        let frameCh = frame.getChildByName('frameChild')\n        frameCh.removeAllChildren();\n        for(var i=0;i<this.spilt;i++)\n        { \n            this.smallSlice = instantiate(this.slicePrefab);\n            this.smallSlice.getComponent(photoSlice2).setSlice(this.spilt,i,imageAsset,this.imageComplete) ;\n            this.smallSlice.setPosition(new Vec3(0,i*this.smallSlice.getComponent(UITransform).height,0));\n            \n            \n            frameCh.addChild(this.smallSlice);\n            let pos = this.smallSlice.getPosition();\n            let radomH=this.fgetRandom(a,0,this.spilt);\n            this.smallSlice.setSiblingIndex(radomH);\n            if(a[radomH]!=undefined){\n            for(let i=0;i<this.spilt;i++){\n                if(a[i]==undefined){\n                    radomH=i;\n                    a[i]=1;\n                    break;\n                }\n            }\n            }else{\n                a[radomH]=1;\n                \n            }\n          \n            pos.y=(imageAsset.height/2)-(imageAsset.height/this.spilt)-radomH*((imageAsset.height/this.spilt));\n            pos.y+= (imageAsset.height/this.spilt)/2\n            this.smallSlice.setPosition(pos);\n            loopNum++;\n        }\n \n    }\n    \n    fgetRandom(a,min, max) {\n        var flag =true;\n        let value=Math.floor(Math.random() * (max - min) + min); \n        return value;\n        \n      }\n    imageComplete = (result, pos : Vec3) =>{\n        this.puzzleResult = result;\n        this.imgCallback(this.puzzleResult, pos);\n        }\n\n    update(deltaTime: number) {\n    }\n\n\n    \n}"]}