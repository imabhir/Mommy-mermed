{"version":3,"sources":["file:///Users/abhishekrawat/Desktop/ImageSlicerViewer-sliceAnim/assets/scripts/gamePlay.ts"],"names":["_decorator","Component","ImageAsset","Prefab","instantiate","CCInteger","UITransform","Vec3","photoSlice2","ccclass","property","GamePlay","type","imgCallback","smallSlice","selectedImage","puzzleResult","frameCh","imageComplete","result","pos","removeAllChildren","start","handleStartButtonClick","setting","settingMenu","node","addChild","setImageforSlice","imageAsset","inc","callback","console","log","slicePrefab","a","Array","loopNum","frame","getChildByName","i","spilt","getComponent","setSlice","setPosition","height","getPosition","radomH","fgetRandom","setSiblingIndex","undefined","y","min","max","flag","value","Math","floor","random","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ImageAsset, SpriteFrame, Texture2D, math, Sprite, macro, Prefab, instantiate, Label, Enum, CCInteger, UITransform, Vec3 } from 'cc';\n\nimport { photoSlice2 } from './photoSlice2';\nimport { SingletonClass } from './singleTon';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GamePlay')\nexport class GamePlay extends Component {\n    @property({type   : Prefab})\n    settingMenu : Prefab = null;\n\n    @property({type:ImageAsset})\n    imageAssert:ImageAsset=null;\n    \n    @property({type : Prefab})\n    slicePrefab : Prefab = null;\n    \n    @property({type: Prefab})\n    imageGlow : Prefab = null;\n    \n    @property({type: CCInteger})\n    spilt : any = 0;\n    \n    @property({type: CCInteger})\n    sliceNumber : any = 0;\n\n    imgCallback : any = null;\n\n    smallSlice : Node = null;\n    selectedImage  : SpriteFrame = null; \n    puzzleResult : Boolean = false;\n    frameCh:Node=null;\n    start() {\n      \n    }\n    handleStartButtonClick(){\n        let setting=instantiate(this.settingMenu);\n        this.node.addChild(setting);\n    }\n    setImageforSlice(imageAsset: any, inc:number,callback){\n        console.log(this.slicePrefab);\n        this.imgCallback = callback\n        var a=new Array();\n        var loopNum=0;\n        let frame = this.node.getChildByName('Frame');\n        this.frameCh = frame.getChildByName('frameChild');\n        \n        this.frameCh.removeAllChildren();\n        \n        for(var i=0;i<this.spilt;i++)\n        { \n            this.smallSlice = instantiate(this.slicePrefab);\n            this.smallSlice.getComponent(photoSlice2).setSlice(this.spilt,i,imageAsset,this.imageComplete) ;\n            console.log(this.smallSlice);\n            this.smallSlice.setPosition(new Vec3(0,i*this.smallSlice.getComponent(UITransform).height,0));\n            \n            \n            this.frameCh.addChild(this.smallSlice);\n            let pos = this.smallSlice.getPosition();\n            let radomH=this.fgetRandom(a,0,this.spilt);\n            this.smallSlice.setSiblingIndex(radomH);\n            if(a[radomH]!=undefined){\n            for(let i=0;i<this.spilt;i++){\n                if(a[i]==undefined){\n                    radomH=i;\n                    a[i]=1;\n                    break;\n                }\n            }\n            }else{\n                a[radomH]=1;\n                \n            }\n          \n            pos.y=(imageAsset.height/2)-(imageAsset.height/this.spilt)-radomH*((imageAsset.height/this.spilt));\n            pos.y+= (imageAsset.height/this.spilt)/2\n            this.smallSlice.setPosition(pos);\n            loopNum++;\n        }\n \n    }\n    \n    fgetRandom(a,min, max) {\n        var flag =true;\n        let value=Math.floor(Math.random() * (max - min) + min); \n        return value;\n        \n      }\n    imageComplete = (result, pos : Vec3) =>{\n        if(result){\n            this.frameCh.removeAllChildren();\n        }\n        this.puzzleResult = result;\n        this.imgCallback(this.puzzleResult, pos);\n        }\n\n    update(deltaTime: number) {\n    }\n\n\n    \n}"]}