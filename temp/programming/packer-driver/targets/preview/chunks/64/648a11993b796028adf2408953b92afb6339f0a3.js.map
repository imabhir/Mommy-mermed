{"version":3,"sources":["file:///Users/abhishekrawat/Desktop/ImageSlicerViewer-sliceAnim/assets/Scripts/resourceLoader.ts"],"names":["_decorator","Component","Node","resources","Prefab","instantiate","SpriteFrame","ImageAsset","UITransform","AudioSource","GamePlay","glowing","SoundManager","SingletonClass","ResourceUtils","ccclass","property","resourceLoader","type","inc","countsuccess","spilt","img","ImageSlide","result","glowInstantiate","child","soundsObj","soundManager","prevImage","destroy","active","resetImage","getComponent","setImageforSlice","imageArray","addGlow","nextImage","console","log","length","addSlider","pos","glowPrefab","createWithImage","blink","sprite","getChildByName","maskContent","addChild","setPosition","y","imageRect","_rect","height","width","start","initAudioSource","getInstance","musicFiles","init","musicAudioSource","initSoundEffectAS","soundAudioSource","handleStartButtonClick","boolSound","playSoundEffect","getMusicFile","node","imageSlicer","getImages","loadDir","err","item","setSelectedImage","nextBtn","resetBtn","on","imageI"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, resources, Prefab, instantiate, director, SpriteFrame, Sprite, Texture2D, ImageAsset, SystemEvent, Input, Scene, SceneAsset, Vec3, UITransform, JsonAsset, AudioClip, AudioSource } from \"cc\";\nimport { GamePlay } from \"./GamePlay\";\nimport { glowing } from \"./glowing\";\nimport { SoundManager } from \"./Managers/SoundManager\";\nimport { SingletonClass } from \"./SingleTon\";\nimport { ResourceUtils } from \"./Managers/ResourceUtils\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"resourceLoader\")\nexport class resourceLoader extends Component {\n\n    @property({type   : Prefab})\n    imageSlicer : Prefab = null;\n    @property({type   : Prefab})\n    settingMenu : Prefab = null;\n\n   @property({type: Prefab})\n   imageArray : ImageAsset[] =[];\n   inc : number =0;\n\n   @property({type: Prefab})\n   glowPrefab: Prefab = null;\n    countsuccess:number=0;\n    spilt:number=3;\n    img : any = null;\n    ImageSlide : Node = null;\n    result: Boolean = false\n    glowInstantiate:Node=null;\n    child : Node = null;\n    soundsObj:any=null;\n    soundManager:any=null;\n    @property(Node) musicAudioSource: Node = null;\n    @property(Node) soundAudioSource: Node = null;\n    \n\n    start() {\n\n        this.initAudioSource();\n        this.soundsObj= SingletonClass.getInstance();\n        this.soundManager = SoundManager.getInstance();\n        ResourceUtils.getInstance().musicFiles();\n    }\n    initAudioSource() {\n        SoundManager.getInstance().init(this.musicAudioSource.getComponent(AudioSource)!);\n        SoundManager.getInstance().initSoundEffectAS(this.soundAudioSource.getComponent(AudioSource)!);\n    }\n    handleStartButtonClick (){\n        if(!this.soundsObj.boolSound){\n            \n            this.soundManager.playSoundEffect( ResourceUtils.getInstance().getMusicFile(\"sound\"),false);\n        }\n        console.log(\"hello\");\n        this.child=this.node.getChildByName(\"Node\");  \n        this.addSlider()     \n    }\n    addSlider(){\n        this.result = false\n        this.child.active = false\n        this.ImageSlide = instantiate(this.imageSlicer);\n        this.node.addChild(this.ImageSlide)\n        this.getImages();   \n    }\n    getImages(){\n\n        resources.loadDir('Images', ImageAsset, (err, item) => {\n            if (err) {\n                console.log(\"ERROR IN LOADING\");\n            } else {\n                this.imageArray =item;\n                console.log('Array length',item.length)\n                this.setSelectedImage()\n            }\n        });\n    }\n        setSelectedImage(){\n            let nextBtn = this.ImageSlide.getChildByName('nextImage');\n            let resetBtn = this.ImageSlide.getChildByName('resetImage');\n            let prevImage = this.ImageSlide.getChildByName('prevImage');\n           \n            prevImage.on('click', this.prevImage, this)\n            resetBtn.on('click', this.resetImage,this)\n           nextBtn.on('click',this.nextImage,this);\n            let imageI = SpriteFrame.createWithImage(this.imageArray[this.inc]);\n            console.log(imageI)\n            this.ImageSlide.getComponent(GamePlay).setImageforSlice(this.imageArray[this.inc],this.countsuccess,this.spilt,this.addGlow);\n        }\n        \n        prevImage = () =>{\n            this.ImageSlide.destroy();\n            this.child.active = true\n            this.inc=0\n\n        }\n        resetImage = () => {\n            this.glowInstantiate.destroy();\n           this.ImageSlide.getComponent(GamePlay).setImageforSlice(this.imageArray[this.inc],this.countsuccess,this.spilt,this.addGlow);\n        }\n        nextImage = () =>{\n            console.log(\"Next Image button\")\n            if(this.inc<this.imageArray.length){\n                if(this.result){\n                    ++this.inc\n                    this.ImageSlide.destroy();\n                    this.addSlider();\n                }\n            } else{\n                console.log(\"END OF ARRAY\")\n                this.ImageSlide.destroy();\n            }\n        }\n        addGlow = (result : Boolean, pos : Vec3,spilt:number) =>{\n                this.result = result;\n                this.spilt=spilt;\n                if(result){\n                    this.countsuccess++;\n                }\n                if(this.countsuccess==4)\n                    this.countsuccess=0;\n                    this.glowInstantiate = instantiate(this.glowPrefab);\n                    this.img= SpriteFrame.createWithImage(this.imageArray[this.inc])\n                    this.glowInstantiate.getComponent(glowing).blink(this.img)\n                    let sprite = this.glowInstantiate.getChildByName('Item_cat');\n                    let maskContent = this.glowInstantiate.getChildByName('Mask');\n                    this.ImageSlide.addChild(this.glowInstantiate);\n                    this.glowInstantiate.setPosition(0, pos.y, 0);\n                   let imageRect = this.img._rect;\n                    sprite.getComponent(UITransform).height = imageRect.height;\n                    sprite.getComponent(UITransform).width = imageRect.width;\n                    maskContent.getComponent(UITransform).height = imageRect.height;\n                    maskContent.getComponent(UITransform).width = imageRect.width;\n                }\n        }\n"]}